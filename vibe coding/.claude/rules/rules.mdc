---
description: Clean Code Implementation and Project Management Best Practices
globs:
  - "**/*.ts"
  - "**/*.js"
  - "**/*.tsx"
  - "**/*.jsx"
alwaysApply: true
---

# Clean Code Implementation Techniques

- Use descriptive, intention-revealing names for variables, functions, classes, etc.
- Avoid vague or misleading names to improve readability and maintainability.
- Each function or module should have one clear purpose, following Single Responsibility Principle (SRP).
- Write code that clearly expresses intent to minimize comments; comment "why", not "what".
- Replace magic numbers or strings with named constants for clarity.
- Organize code into layers or modules (routes, controllers, services, models).
- Implement centralized and consistent error handling.
- Use modern language features like async/await for better async operations management.
- Use code linting and formatting tools (ESLint, Prettier) automatically.
- Write unit tests to ensure correctness and ease future refactoring.
- Avoid duplications by abstracting repeated logic into reusable functions/classes.
- Enforce coding standards using linters and pre-commit hooks.
- Regularly refactor code for simplicity and reduced technical debt.
- Avoid Emoji on UI and Codebase
- Always Professional UI Layout Positioning, Font, Spacing, and more releants

# Avoid Deleting Root/Database and Project Safety Best Practices

- Implement database-level safeguards such as triggers to prevent accidental DELETE operations.
- Restrict user permissions in the database and filesystem to limit delete rights to only necessary users.
- Mark critical files and folders as immutable on Linux (`chattr +i`) or read-only on Windows (NTFS permissions).
- Use aliases or safety wrappers for destructive commands (`rm`, `del`) to require confirmation before deletion.
- In IDEs, prefer remove or exclude folder operations that do not physically delete files (e.g., IntelliJ content root removal).
- Regularly back up your database and project files with automated or manual systems.
- Use version control (Git) extensively to track, revert, and protect code changes.
- Separate critical database files or root folders into protected or less accessible locations.
- Educate your team about safe file and database handling practices.
- Automate checks for sensitive actions in CI/CD pipelines or pre-commit hooks.
- Log and audit all destructive operations for traceability and accountability.
- Avoid executing destructive commands/scripts without double confirmation or review.

# General Project Safety and Collaboration

- Define clear roles and responsibilities, especially around database and root access.
- Use project management tools to track changes, deployments, and backups.
- Enforce coding and operational standards with linters, hooks, and automated checks.
- Regular communication, code review, and knowledge sharing reduce accidental errors.
- Design APIs and scripts idempotently to safely handle repeat actions without data loss.
- Keep thorough documentation including database schemas, backup procedures, and file structures.

# Project Management and Collaboration

- Define clear project scope, objectives, deliverables, deadlines, and constraints.
- Assign clear roles and responsibilities for team members.
- Use project management tools for task, version, and documentation tracking.
- Practice regular communication, standups, reviews, and retrospectives.
- Design APIs/modules to be idempotent and implement caching/memoization.
- Use code reviews with multiple reviewers and integrate automated checks.
- Employ branching strategies like GitFlow and commit with descriptive messages.
- Maintain detailed project documentation, including API docs and architecture decisions.
- Automate repetitive tasks such as builds, deployments, and code quality checks.
- Use effective communication tools (Slack, Teams) for streamlined interactions.
- Share reusable code snippets consistently.
- Keep audit trails with reasons and author for changes and enforce access controls.
- Adapt conflict resolution styles and encourage collaborative problem-solving.