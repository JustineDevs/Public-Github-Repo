---
description: Frontend Development Practices and User Experience Standards
globs:
  - "**/*.js"
  - "**/*.ts"
  - "**/*.jsx"
  - "**/*.tsx"
  - "**/*.vue"
  - "**/*.svelte"
  - "**/*.html"
  - "**/*.css"
  - "**/*.scss"
  - "**/*.sass"
  - "**/src/**"
  - "**/components/**"
  - "**/pages/**"
alwaysApply: true
---

# Frontend Implementation Techniques

- Use modern JavaScript/TypeScript features and ES6+ syntax for better code quality.
- Implement proper component-based architecture with clear separation of concerns.
- Use proper state management patterns (Redux, Zustand, Context API) for complex applications.
- Implement proper error boundaries and error handling mechanisms.
- Use proper TypeScript types and interfaces for better type safety and developer experience.
- Implement proper lazy loading and code splitting for performance optimization.
- Use proper accessibility (a11y) standards and ARIA attributes for inclusive design.
- Implement proper responsive design with mobile-first approach.
- Use proper CSS methodologies (BEM, CSS Modules, Styled Components) for maintainable styles.
- Implement proper form validation and user input handling.
- Use proper routing and navigation patterns for single-page applications.
- Implement proper internationalization (i18n) and localization (l10n) support.

# User Experience & Interface Design

- Design intuitive and consistent user interfaces following established design systems.
- Implement proper loading states and skeleton screens for better perceived performance.
- Use proper micro-interactions and animations to enhance user experience.
- Implement proper error states and empty states with helpful messaging.
- Use proper color contrast ratios and accessibility standards for inclusive design.
- Implement proper keyboard navigation and screen reader support.
- Use proper responsive breakpoints and mobile-optimized layouts.
- Implement proper touch-friendly interfaces for mobile devices.
- Use proper typography and spacing for optimal readability and visual hierarchy.
- Implement proper dark mode and theme switching capabilities.
- Use proper progressive enhancement for better cross-browser compatibility.
- Implement proper user feedback mechanisms and notifications.

# Performance & Optimization

- Implement proper code splitting and lazy loading for optimal bundle sizes.
- Use proper image optimization and responsive images for better performance.
- Implement proper caching strategies (browser caching, service workers).
- Use proper tree shaking and dead code elimination for smaller bundles.
- Implement proper virtual scrolling for large datasets and lists.
- Use proper memoization and React optimization techniques (useMemo, useCallback).
- Implement proper preloading and prefetching for critical resources.
- Use proper CDN integration and asset optimization.
- Implement proper performance monitoring and Core Web Vitals tracking.
- Use proper bundle analysis and optimization tools.
- Implement proper critical CSS inlining for above-the-fold content.
- Use proper service workers for offline functionality and caching.

# State Management & Data Flow

- Use proper state management patterns appropriate for application complexity.
- Implement proper data normalization and state structure for complex applications.
- Use proper async state management with loading, error, and success states.
- Implement proper state persistence and hydration for better user experience.
- Use proper state validation and type safety with TypeScript.
- Implement proper optimistic updates for better perceived performance.
- Use proper state synchronization across components and pages.
- Implement proper undo/redo functionality where appropriate.
- Use proper state debugging tools and development experience improvements.
- Implement proper state testing strategies and mocking.
- Use proper state migration and versioning for long-term maintenance.
- Implement proper state cleanup and memory leak prevention.

# Testing & Quality Assurance

- Write comprehensive unit tests for components, utilities, and business logic.
- Implement proper integration tests for user workflows and API interactions.
- Use proper end-to-end testing with tools like Cypress or Playwright.
- Implement proper visual regression testing for UI consistency.
- Use proper accessibility testing with automated tools and manual testing.
- Implement proper performance testing and Core Web Vitals validation.
- Use proper test data management and test environment setup.
- Implement proper test coverage reporting and quality gates.
- Use proper mocking and stubbing for external dependencies and APIs.
- Implement proper test documentation and test case management.
- Use proper cross-browser testing and compatibility validation.
- Implement proper test automation in CI/CD pipelines.

# Security & Best Practices

- Implement proper input validation and sanitization to prevent XSS attacks.
- Use proper Content Security Policy (CSP) headers for security.
- Implement proper authentication and authorization handling.
- Use proper secure coding practices and avoid common vulnerabilities.
- Implement proper data encryption for sensitive information.
- Use proper HTTPS and secure communication protocols.
- Implement proper session management and token handling.
- Use proper dependency scanning and vulnerability assessment.
- Implement proper security headers and protection mechanisms.
- Use proper secure storage for sensitive data (localStorage, sessionStorage).
- Implement proper CSRF protection and secure form handling.
- Use proper security monitoring and incident response procedures.

# Accessibility & Inclusive Design

- Implement proper ARIA attributes and semantic HTML for screen readers.
- Use proper keyboard navigation and focus management.
- Implement proper color contrast ratios and visual accessibility.
- Use proper alt text and image descriptions for visual content.
- Implement proper form labels and error messaging for accessibility.
- Use proper heading structure and document outline for navigation.
- Implement proper screen reader announcements and live regions.
- Use proper focus indicators and visual feedback for interactions.
- Implement proper high contrast mode and theme support.
- Use proper text scaling and zoom support for different user needs.
- Implement proper motion sensitivity options and reduced motion support.
- Use proper accessibility testing tools and manual testing procedures.

# Build & Development Tools

- Use proper build tools and bundlers (Webpack, Vite, Rollup) for optimal builds.
- Implement proper development server configuration and hot reloading.
- Use proper linting and code formatting tools (ESLint, Prettier).
- Implement proper TypeScript configuration and strict mode settings.
- Use proper CSS preprocessing and post-processing tools.
- Implement proper asset optimization and compression.
- Use proper environment configuration and build optimization.
- Implement proper source maps for debugging and development.
- Use proper development tools and debugging extensions.
- Implement proper build caching and incremental builds.
- Use proper build monitoring and performance analysis.
- Implement proper build documentation and deployment procedures.

# Component Architecture & Design Patterns

- Use proper component composition and higher-order components (HOCs).
- Implement proper custom hooks for reusable logic and state management.
- Use proper render props and children patterns for flexible components.
- Implement proper compound components for complex UI patterns.
- Use proper context providers and consumers for global state.
- Implement proper error boundaries and fallback UI components.
- Use proper lazy loading and suspense for code splitting.
- Implement proper memoization and performance optimization patterns.
- Use proper prop drilling solutions and state lifting patterns.
- Implement proper component testing strategies and mocking.
- Use proper component documentation and storybook integration.
- Implement proper component versioning and API stability.

# Styling & CSS Architecture

- Use proper CSS methodologies (BEM, CSS Modules, Styled Components).
- Implement proper design system and component library integration.
- Use proper responsive design patterns and mobile-first approach.
- Implement proper CSS custom properties and theme management.
- Use proper CSS-in-JS solutions for component-scoped styling.
- Implement proper CSS optimization and critical path optimization.
- Use proper CSS preprocessing and post-processing workflows.
- Implement proper CSS linting and style guide enforcement.
- Use proper CSS testing and visual regression testing.
- Implement proper CSS documentation and style guide maintenance.
- Use proper CSS performance optimization and bundle analysis.
- Implement proper CSS accessibility and inclusive design practices.

# Pre-Deployment Checklist

## Performance & Optimization
- [ ] Bundle size analysis completed and optimized
- [ ] Core Web Vitals meet performance standards
- [ ] Image optimization and lazy loading implemented
- [ ] Code splitting and tree shaking configured
- [ ] Caching strategies implemented and tested

## Accessibility & User Experience
- [ ] Accessibility audit completed with no critical issues
- [ ] Keyboard navigation and screen reader support tested
- [ ] Color contrast ratios meet WCAG standards
- [ ] Responsive design tested across devices and browsers
- [ ] User experience testing completed and feedback incorporated

## Security & Best Practices
- [ ] Security scan completed with no critical vulnerabilities
- [ ] Input validation and XSS protection implemented
- [ ] Content Security Policy headers configured
- [ ] Authentication and authorization properly implemented
- [ ] Dependencies updated and vulnerability-free

## Testing & Quality Assurance
- [ ] Unit tests passing with adequate coverage
- [ ] Integration tests completed successfully
- [ ] End-to-end tests passing for critical workflows
- [ ] Cross-browser compatibility tested
- [ ] Performance testing completed and requirements met

## Build & Deployment
- [ ] Build process tested and optimized
- [ ] Environment configuration properly set up
- [ ] CDN and asset optimization configured
- [ ] Monitoring and analytics properly implemented
- [ ] Documentation updated and current

# Frontend Naming Conventions

- Use camelCase for variables, functions, and method names.
- Use PascalCase for components, classes, and constructors.
- Use kebab-case for CSS classes, file names, and URLs.
- Use UPPER_SNAKE_CASE for constants and configuration values.
- Use descriptive names that clearly indicate purpose and functionality.
- Use consistent naming patterns across all frontend code.
- Use proper prefixes/suffixes for different types of components.
- Follow framework-specific conventions (React, Vue, Angular).
- Use meaningful names for CSS classes and component props.
- Use consistent naming for API endpoints and data properties.

# Component Documentation Standards

- Document all component props with TypeScript interfaces.
- Include usage examples and code snippets for each component.
- Document component state and lifecycle methods where applicable.
- Include accessibility notes and keyboard interaction patterns.
- Document styling customization options and theme support.
- Include performance considerations and optimization notes.
- Document testing strategies and example test cases.
- Include migration guides for breaking changes.
- Document browser compatibility and polyfill requirements.
- Include troubleshooting guides and common issues.
- Document component composition patterns and best practices.
- Include visual examples and design system integration.

# API Integration & Data Management

- Implement proper API client configuration and error handling.
- Use proper data fetching patterns (React Query, SWR, Apollo).
- Implement proper loading states and error handling for API calls.
- Use proper data caching and synchronization strategies.
- Implement proper optimistic updates and rollback mechanisms.
- Use proper data validation and type safety with TypeScript.
- Implement proper retry mechanisms and exponential backoff.
- Use proper request deduplication and caching strategies.
- Implement proper offline support and data synchronization.
- Use proper API versioning and backward compatibility.
- Implement proper rate limiting and request throttling.
- Use proper API monitoring and error tracking.

By following these comprehensive frontend development practices, applications will achieve high performance, accessibility, user experience, and maintainability standards.