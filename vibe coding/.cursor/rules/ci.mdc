---
description: CI/CD Pipeline Practices and DevOps Automation Standards
globs:
  - "**/.github/**"
  - "**/.gitlab-ci.yml"
  - "**/Jenkinsfile"
  - "**/azure-pipelines.yml"
  - "**/bitbucket-pipelines.yml"
  - "**/.circleci/**"
  - "**/Dockerfile"
  - "**/docker-compose.yml"
  - "**/k8s/**"
  - "**/kubernetes/**"
  - "**/*.yaml"
  - "**/*.yml"
  - "**/scripts/**"
  - "**/deploy/**"
alwaysApply: true
---

# CI/CD Implementation Techniques

- Design CI/CD pipelines with clear separation of concerns and modular stages.
- Implement proper pipeline orchestration and workflow management for complex deployments.
- Use proper environment management and configuration for different deployment targets.
- Implement proper artifact management and versioning for build outputs and deployments.
- Use proper pipeline security and access control for sensitive operations.
- Implement proper pipeline monitoring and observability for debugging and optimization.
- Use proper pipeline testing and validation strategies for quality assurance.
- Implement proper pipeline documentation and runbook maintenance.
- Use proper pipeline automation and self-healing capabilities for resilience.
- Implement proper pipeline scalability and performance optimization.
- Use proper pipeline compliance and governance for regulated environments.
- Implement proper pipeline disaster recovery and business continuity planning.

# Pipeline Design & Architecture

- Design CI/CD pipelines with clear stages (build, test, security, deploy, monitor).
- Implement proper pipeline branching strategies and merge policies.
- Use proper pipeline triggers and event-driven automation for efficient execution.
- Implement proper pipeline parallelization and concurrent execution strategies.
- Use proper pipeline caching and optimization for faster execution times.
- Implement proper pipeline environment isolation and sandboxing.
- Use proper pipeline resource management and cost optimization.
- Implement proper pipeline error handling and failure recovery mechanisms.
- Use proper pipeline logging and debugging capabilities for troubleshooting.
- Implement proper pipeline metrics and performance monitoring.
- Use proper pipeline security scanning and vulnerability assessment.
- Implement proper pipeline compliance and audit trail management.

# Build & Compilation

- Implement proper build automation and dependency management for consistent builds.
- Use proper build caching and incremental builds for faster compilation times.
- Implement proper build artifact management and storage for deployment packages.
- Use proper build environment management and containerization for consistency.
- Implement proper build optimization and parallel compilation strategies.
- Use proper build security scanning and vulnerability assessment.
- Implement proper build documentation and build process documentation.
- Use proper build monitoring and performance tracking for optimization.
- Implement proper build rollback and disaster recovery procedures.
- Use proper build testing and validation strategies for quality assurance.
- Implement proper build compliance and regulatory requirements.
- Use proper build cost optimization and resource management.

# Testing & Quality Assurance

- Implement comprehensive testing strategies (unit, integration, end-to-end, performance).
- Use proper test automation and continuous testing in CI/CD pipelines.
- Implement proper test data management and test environment setup.
- Use proper test parallelization and concurrent execution for faster feedback.
- Implement proper test reporting and coverage analysis for quality metrics.
- Use proper test security scanning and vulnerability assessment.
- Implement proper test documentation and test case management.
- Use proper test monitoring and performance tracking for optimization.
- Implement proper test rollback and disaster recovery procedures.
- Use proper test compliance and regulatory requirements.
- Implement proper test cost optimization and resource management.
- Use proper test incident response and troubleshooting procedures.

# Security & Compliance

- Implement proper security scanning and vulnerability assessment in CI/CD pipelines.
- Use proper secrets management and secure configuration for sensitive data.
- Implement proper access control and authentication for CI/CD operations.
- Use proper security monitoring and threat detection for pipeline security.
- Implement proper compliance checking and regulatory requirements.
- Use proper security documentation and security process documentation.
- Implement proper security incident response and escalation procedures.
- Use proper security training and awareness for development teams.
- Implement proper security audit and compliance monitoring.
- Use proper security cost optimization and resource management.
- Implement proper security disaster recovery and business continuity.
- Use proper security governance and policy enforcement.

# Deployment & Release Management

- Implement proper deployment strategies (blue-green, canary, rolling) for zero-downtime deployments.
- Use proper environment management and configuration for different deployment targets.
- Implement proper release management and versioning for deployment packages.
- Use proper deployment automation and orchestration for complex deployments.
- Implement proper deployment monitoring and health checking for deployment validation.
- Use proper deployment rollback and disaster recovery procedures.
- Implement proper deployment documentation and deployment process documentation.
- Use proper deployment security and access control for production deployments.
- Implement proper deployment compliance and regulatory requirements.
- Use proper deployment cost optimization and resource management.
- Implement proper deployment incident response and troubleshooting procedures.
- Use proper deployment governance and policy enforcement.

# Infrastructure as Code

- Implement proper infrastructure as code using tools like Terraform, CloudFormation, or Pulumi.
- Use proper infrastructure versioning and change management for infrastructure updates.
- Implement proper infrastructure testing and validation strategies.
- Use proper infrastructure security and compliance for infrastructure resources.
- Implement proper infrastructure monitoring and observability for infrastructure health.
- Use proper infrastructure documentation and infrastructure process documentation.
- Implement proper infrastructure disaster recovery and business continuity.
- Use proper infrastructure cost optimization and resource management.
- Implement proper infrastructure incident response and troubleshooting procedures.
- Use proper infrastructure governance and policy enforcement.
- Implement proper infrastructure automation and self-healing capabilities.
- Use proper infrastructure compliance and regulatory requirements.

# Monitoring & Observability

- Implement comprehensive monitoring and observability for CI/CD pipelines and deployments.
- Use proper metrics collection and monitoring dashboards for pipeline performance.
- Implement proper alerting and notification systems for pipeline issues.
- Use proper distributed tracing for complex CI/CD workflows.
- Implement proper log aggregation and analysis for pipeline debugging.
- Use proper performance monitoring and optimization for pipeline efficiency.
- Implement proper business metrics and KPI monitoring for deployment impact.
- Use proper incident response and escalation procedures for pipeline failures.
- Implement proper capacity monitoring and scaling triggers for pipeline resources.
- Use proper security monitoring and threat detection for pipeline security.
- Implement proper compliance monitoring and audit trail management.
- Use proper cost monitoring and optimization for pipeline resources.

# Container & Orchestration

- Implement proper containerization strategies using Docker and container orchestration.
- Use proper container security and vulnerability scanning for container images.
- Implement proper container registry management and image versioning.
- Use proper container orchestration with Kubernetes for scalable deployments.
- Implement proper container monitoring and observability for container health.
- Use proper container networking and service discovery for container communication.
- Implement proper container storage and persistent volume management.
- Use proper container security and access control for container operations.
- Implement proper container compliance and regulatory requirements.
- Use proper container cost optimization and resource management.
- Implement proper container incident response and troubleshooting procedures.
- Use proper container governance and policy enforcement.

# Database & Data Management

- Implement proper database migration and schema management in CI/CD pipelines.
- Use proper database backup and recovery procedures for data protection.
- Implement proper database testing and validation strategies.
- Use proper database security and access control for database operations.
- Implement proper database monitoring and performance optimization.
- Use proper database compliance and regulatory requirements.
- Implement proper database disaster recovery and business continuity.
- Use proper database cost optimization and resource management.
- Implement proper database incident response and troubleshooting procedures.
- Use proper database governance and policy enforcement.
- Implement proper database automation and self-healing capabilities.
- Use proper database documentation and database process documentation.

# Pre-Deployment Checklist

## Pipeline & Infrastructure
- [ ] CI/CD pipeline tested and validated for all environments
- [ ] Infrastructure as code implemented and tested
- [ ] Container orchestration configured and tested
- [ ] Database migration procedures tested and documented
- [ ] Monitoring and alerting systems configured

## Security & Compliance
- [ ] Security scan completed with no critical vulnerabilities
- [ ] Secrets management and access controls configured
- [ ] Compliance requirements verified and documented
- [ ] Security monitoring and threat detection enabled
- [ ] Audit logging and compliance monitoring configured

## Testing & Quality Assurance
- [ ] All test suites passing with adequate coverage
- [ ] Performance testing completed and requirements met
- [ ] Security testing completed with no critical issues
- [ ] Integration testing completed successfully
- [ ] End-to-end testing completed for critical workflows

## Deployment & Release
- [ ] Deployment strategies tested and validated
- [ ] Release management and versioning configured
- [ ] Rollback procedures tested and documented
- [ ] Environment configuration and secrets management set up
- [ ] Deployment monitoring and health checking implemented

## Documentation & Operations
- [ ] Pipeline documentation completed and current
- [ ] Deployment procedures documented and tested
- [ ] Incident response procedures documented and tested
- [ ] Team training and knowledge transfer completed
- [ ] Operational runbooks created and validated

# CI/CD Naming Conventions

- Use kebab-case for pipeline names, job names, and stage names.
- Use UPPER_SNAKE_CASE for environment variables and configuration values.
- Use descriptive names that clearly indicate pipeline purpose and functionality.
- Use consistent naming patterns across all CI/CD configurations.
- Use proper prefixes/suffixes for different types of pipelines and jobs.
- Follow platform-specific conventions (GitHub Actions, GitLab CI, Jenkins).
- Use meaningful names for artifacts, environments, and deployment targets.
- Use consistent naming for configuration files and environment settings.
- Use proper versioning and tagging for pipeline and deployment versions.
- Use proper naming for monitoring dashboards and alerting rules.

# Pipeline Security Best Practices

- Implement proper authentication and authorization for all CI/CD operations.
- Use proper secrets management and secure storage for sensitive data.
- Implement proper access control and least privilege principles.
- Use proper security scanning and vulnerability assessment in pipelines.
- Implement proper audit logging and compliance monitoring.
- Use proper secure communication protocols (HTTPS, TLS) for all operations.
- Implement proper input validation and sanitization for pipeline inputs.
- Use proper security headers and protection mechanisms.
- Implement proper incident response and security monitoring.
- Use proper security training and awareness for development teams.
- Implement proper security governance and policy enforcement.
- Use proper security cost optimization and resource management.

# Pipeline Performance Optimization

- Implement proper pipeline caching and incremental builds for faster execution.
- Use proper parallelization and concurrent execution for pipeline stages.
- Implement proper resource optimization and cost management.
- Use proper pipeline monitoring and performance tracking.
- Implement proper pipeline scaling and elastic resource allocation.
- Use proper pipeline optimization and continuous improvement.
- Implement proper pipeline documentation and best practices sharing.
- Use proper pipeline testing and validation for optimization.
- Implement proper pipeline incident response and troubleshooting.
- Use proper pipeline governance and policy enforcement.
- Implement proper pipeline compliance and regulatory requirements.
- Use proper pipeline disaster recovery and business continuity.

# Pipeline Monitoring & Alerting

- Implement comprehensive monitoring for all pipeline stages and deployments.
- Use proper metrics collection and monitoring dashboards for pipeline health.
- Implement proper alerting and notification systems for pipeline issues.
- Use proper distributed tracing for complex pipeline workflows.
- Implement proper log aggregation and analysis for pipeline debugging.
- Use proper performance monitoring and optimization for pipeline efficiency.
- Implement proper business metrics and KPI monitoring for deployment impact.
- Use proper incident response and escalation procedures for pipeline failures.
- Implement proper capacity monitoring and scaling triggers for pipeline resources.
- Use proper security monitoring and threat detection for pipeline security.
- Implement proper compliance monitoring and audit trail management.
- Use proper cost monitoring and optimization for pipeline resources.

By following these comprehensive CI/CD practices, deployment pipelines will achieve high reliability, security, performance, and maintainability standards for production environments.