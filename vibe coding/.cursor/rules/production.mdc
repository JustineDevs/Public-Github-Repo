---
description: Production Team Integration and Deployment Best Practices
globs:
  - "**/*"
alwaysApply: true
---

# Frontend and Backend Integration Workflow

## Branch Management Strategy
- Each team (frontend, backend) works on their own branch, e.g., `frontend` and `backend`â€”sometimes even separate repositories.
- Create integration branches (e.g., `integration-test` or `merge-preview`) for testing frontend and backend integration.
- Merge both `frontend` and `backend` branches into the integration branch for comprehensive testing.
- Resolve all conflicts in the integration branch before any work goes to `main` or `production`.
- Use feature branches for backend or frontend-specific work before entering shared development/staging branches.

## Integration Testing Process
- Run manual, unit, and automated integration (E2E, CI/CD) tests against the combined codebase.
- Perform local testing on the integration branch with both frontend and backend servers running.
- Verify UI/API flows and features through comprehensive integration testing.
- Use mock API servers or stubbed endpoints when backend is not fully updated.
- Ensure all integration tests pass before proceeding to main branch merge.

## Automated Testing and CI/CD
- Implement Continuous Integration (CI) jobs to run post-merge checks on integration branches.
- Spin up containers for both services to test API/UI interactions automatically.
- Incorporate both unit and end-to-end tests in the CI/CD pipeline.
- Automate as much of the integration testing as possible to reduce manual overhead.
- Set up automated deployment pipelines for staging and production environments.

## Code Review and Quality Assurance
- Conduct peer reviews before merging into `main` to ensure protocol alignment.
- Verify documented API contracts and integration readiness.
- Check API endpoints, response formats, and environment variables consistency.
- Ensure code quality standards are met across both frontend and backend codebases.
- Validate that all integration requirements are properly documented and implemented.

## Production Deployment Process
- Merge integration branch into `main` only after passing all checks and reviews.
- Implement safe rollback mechanisms using Git commands like `git reset --hard origin/main`.
- Monitor for regressions immediately after merging to main.
- Have a comprehensive rollback plan ready for quick response to issues.
- Use deployment strategies that minimize production disruption.

## API Documentation and Communication
- Maintain clear API documentation so both frontend and backend teams understand data flow.
- Document API contracts, endpoints, and response formats comprehensively.
- Establish clear communication protocols between frontend and backend teams.
- Reduce integration bugs through proper documentation and team alignment.
- Keep environment variables and configuration changes well-documented.

## Quality Assurance Best Practices
- Use integration/testing branches to validate code before impacting production.
- Implement comprehensive testing strategies including unit, integration, and E2E tests.
- Maintain clear separation between development, staging, and production environments.
- Establish monitoring and alerting systems for production deployments.
- Regular team coordination meetings to ensure alignment on integration requirements.

## Deployment Safety Measures
- Never deploy untested code directly to production.
- Always test integration changes in staging environment first.
- Implement feature flags for gradual rollout of new functionality.
- Maintain database migration strategies for backend changes.
- Use blue-green or canary deployment strategies for critical updates.

## Post-Deployment Monitoring
- Monitor application performance and user experience after deployment.
- Track error rates, response times, and system health metrics.
- Implement automated rollback triggers for critical issues.
- Maintain incident response procedures for production issues.
- Conduct post-mortem analysis for any deployment-related problems.

## Team Collaboration Guidelines
- Establish clear roles and responsibilities for frontend and backend teams.
- Use effective communication platforms (Slack, Discord, etc.) for real-time coordination.
- Schedule regular integration checkpoints and team sync meetings.
- Maintain shared development environments for testing integration changes.
- Document all integration decisions and architectural changes.

## Version Control Best Practices
- Use meaningful commit messages that clearly describe changes.
- Tag releases and deployments for easy rollback and tracking.
- Maintain clean commit history with proper branching strategies.
- Use pull request templates to ensure consistent review processes.
- Implement branch protection rules for main and production branches.

This approach minimizes disruption, ensures frontend and backend work correctly together, and maintains production quality by catching integration bugs before merging to the main branch.
