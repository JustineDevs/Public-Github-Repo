---
description: General Development Practices and Code Quality Standards
globs:
  - "**/*.js"
  - "**/*.ts"
  - "**/*.py"
  - "**/*.go"
  - "**/*.java"
  - "**/*.cs"
  - "**/*.php"
  - "**/*.rb"
  - "**/*.rs"
alwaysApply: true
---

# Implementation Techniques & Code Principles

- Use descriptive, intention-revealing names for variables, functions, classes, and modules.
- Avoid vague or misleading names to improve readability, maintainability, and debugging efficiency.
- Each function, class, or module should have one clear, focused purpose (Single Responsibility Principle).
- Express code intent clearly to minimize comments; document "why" decisions when necessary.
- Replace magic numbers and strings with named constants or configuration variables.
- Organize code using modular architecture; split logic into reusable components with clear interfaces.
- Favor code simplicity and clarity; avoid overly clever code constructs that risk maintainability.
- Implement centralized and consistent error handling using appropriate patterns for your language.
- Follow established design patterns and architectural principles (SOLID, DRY, KISS).
- Write self-documenting code that explains business logic through structure and naming.
- Use type hints, annotations, or strong typing where available to improve code safety.
- Implement proper logging and debugging mechanisms for production troubleshooting.

# Security & Clean Code Practices

- Validate all external inputs and user data before processing.
- Use parameterized queries and prepared statements to prevent injection attacks.
- Implement proper authentication and authorization mechanisms.
- Follow the principle of least privilege for access controls.
- Sanitize and escape output to prevent XSS and other injection vulnerabilities.
- Use secure coding practices and avoid common security anti-patterns.
- Implement proper session management and secure cookie handling.
- Use HTTPS/TLS for all external communications.
- Store sensitive data using proper encryption and hashing techniques.
- Regular security audits and vulnerability assessments.
- Keep dependencies updated and monitor for security advisories.
- Implement proper input validation and output encoding.

# Operational Excellence & Monitoring

- Implement comprehensive logging with appropriate log levels (DEBUG, INFO, WARN, ERROR).
- Use structured logging with consistent formats for better analysis.
- Set up monitoring and alerting for critical application metrics.
- Implement health checks and status endpoints for service monitoring.
- Use distributed tracing for microservices and complex systems.
- Implement proper error tracking and crash reporting.
- Monitor performance metrics and set up automated performance testing.
- Use application performance monitoring (APM) tools for production insights.
- Implement proper backup and disaster recovery procedures.
- Document operational procedures and runbooks for incident response.
- Use infrastructure as code for consistent and reproducible deployments.

# Testing & Quality Assurance

- Write comprehensive unit tests with high coverage for critical business logic.
- Implement integration tests for API endpoints and external service interactions.
- Use test-driven development (TDD) methodology for complex features.
- Implement end-to-end tests for critical user workflows.
- Use property-based testing and fuzz testing for robust validation.
- Implement performance testing and load testing for scalability validation.
- Use static analysis tools and linters to catch code quality issues.
- Implement automated code review processes and quality gates.
- Use mutation testing to validate test quality and effectiveness.
- Implement continuous testing in CI/CD pipelines.
- Maintain test data management and test environment consistency.

# Disaster Recovery & Incident Response

- Create clear disaster recovery playbooks for different failure scenarios.
- Document process for service restoration and data recovery procedures.
- Implement automated failover mechanisms where appropriate.
- Establish clear communication protocols for incidents and outages.
- Maintain emergency contact lists and escalation procedures.
- Implement circuit breakers and bulkhead patterns for fault isolation.
- Use chaos engineering to test system resilience.
- Document post-mortem procedures and root cause analysis processes.
- Implement proper backup strategies and data retention policies.
- Test disaster recovery procedures regularly through drills and simulations.

# Roles & Responsibilities

- Define clear roles and responsibilities for all team members.
- Establish code review processes with defined reviewers and approval criteria.
- Implement proper access controls and permission management.
- Define escalation procedures for different types of issues.
- Establish clear communication channels and reporting structures.
- Document decision-making processes and approval workflows.
- Implement proper knowledge sharing and documentation practices.
- Define on-call responsibilities and rotation schedules.
- Establish clear boundaries between different team functions.
- Implement proper onboarding and training procedures for new team members.

# Pre-Deployment & Release Checklist

## Code Quality
- [ ] All static analysis issues resolved
- [ ] Code review completed and approved
- [ ] Unit tests passing with adequate coverage
- [ ] Integration tests completed successfully
- [ ] Performance tests meet requirements

## Security & Compliance
- [ ] Security scan completed with no critical issues
- [ ] Dependencies updated and vulnerability-free
- [ ] Data handling practices documented and compliant
- [ ] Access controls properly implemented
- [ ] Audit logs configured and tested

## Deployment & Operations
- [ ] Deployment scripts tested in staging environment
- [ ] Database migrations tested and rollback procedures documented
- [ ] Monitoring and alerting configured
- [ ] Health checks implemented and tested
- [ ] Documentation updated and current

## Release Management
- [ ] Version numbers updated and tagged
- [ ] Release notes prepared and reviewed
- [ ] Rollback procedures tested and documented
- [ ] Stakeholder communication completed
- [ ] Post-deployment monitoring plan in place

# Naming & Style Conventions

- Use camelCase for variables and functions in JavaScript/TypeScript.
- Use PascalCase for classes and constructors.
- Use UPPER_SNAKE_CASE for constants and configuration values.
- Use kebab-case for file names and URLs.
- Use descriptive names that convey purpose and context.
- Avoid abbreviations unless they are widely understood.
- Use consistent naming patterns across the entire codebase.
- Follow language-specific style guides and conventions.
- Use meaningful prefixes/suffixes for different types of identifiers.
- Maintain consistent indentation and formatting using automated tools.

# Dependency Management & Supply Chain Security

- Pin dependency versions to specific releases for reproducible builds.
- Regularly audit dependencies for known vulnerabilities.
- Use dependency scanning tools in CI/CD pipelines.
- Maintain a dependency inventory with security status.
- Document rationale for each external dependency.
- Use private package registries for internal dependencies.
- Implement dependency update policies and procedures.
- Monitor for security advisories and apply patches promptly.
- Use lock files to ensure consistent dependency resolution.
- Implement proper dependency isolation and sandboxing.

# Legal, Compliance & Community Engagement

- Add appropriate license headers to all source files.
- Ensure compliance with relevant data protection regulations (GDPR, CCPA).
- Document data handling practices and privacy protections.
- Maintain clear terms of service and user agreements.
- Implement proper data retention and deletion policies.
- Establish bug bounty programs for security research.
- Create channels for community feedback and contributions.
- Recognize and reward community contributions appropriately.
- Maintain transparent communication about security issues.
- Document compliance requirements and audit procedures.

# CI/CD & Automation

- Implement automated testing in pre-commit hooks and CI pipelines.
- Use automated code formatting and linting tools.
- Implement automated security scanning and vulnerability assessment.
- Use automated deployment pipelines with proper approval gates.
- Implement automated rollback mechanisms for failed deployments.
- Use infrastructure as code for consistent environment management.
- Implement automated performance testing and monitoring.
- Use automated dependency updates with proper testing.
- Implement automated documentation generation and deployment.
- Use automated compliance checking and reporting.

# Code Review & Collaboration

- Require peer review for all code changes before merging.
- Use automated tools to check for common issues and anti-patterns.
- Implement proper branching strategies and merge policies.
- Use pull request templates to ensure consistent review processes.
- Document architectural decisions and design rationale.
- Implement proper conflict resolution procedures.
- Use collaborative development tools and platforms effectively.
- Establish clear communication protocols for code discussions.
- Implement proper knowledge sharing and documentation practices.
- Use pair programming and code walkthroughs for complex features.

# Performance & Scalability

- Implement proper caching strategies for frequently accessed data.
- Use database indexing and query optimization techniques.
- Implement proper connection pooling and resource management.
- Use asynchronous processing for long-running operations.
- Implement proper load balancing and horizontal scaling strategies.
- Monitor and optimize memory usage and garbage collection.
- Use profiling tools to identify performance bottlenecks.
- Implement proper rate limiting and throttling mechanisms.
- Use CDN and edge computing for global performance.
- Implement proper data archiving and cleanup strategies.

# Documentation & Knowledge Management

- Maintain comprehensive API documentation with examples.
- Document architectural decisions and design patterns used.
- Create user guides and developer onboarding documentation.
- Maintain runbooks for operational procedures.
- Document troubleshooting guides and common issues.
- Use automated documentation generation where possible.
- Maintain up-to-date README files for all projects.
- Document configuration options and environment setup.
- Create visual diagrams for complex system architectures.
- Implement proper version control for documentation.

By following these comprehensive development practices, projects will achieve high code quality, security, maintainability, and operational excellence standards.